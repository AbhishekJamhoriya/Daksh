# Telegraf Configuration
#
# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.
#
# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.
#
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply prepend
# them with $. For strings the variable must be within quotes (ie, "$STR_VAR"),
# for numbers and booleans they should be plain (ie, $INT_VAR, $BOOL_VAR)


# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"


# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "1s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 100

  ## For failed writes, telegraf will cache metric_buffer_limit metrics for each
  ## output, and will flush this buffer on a successful write. Oldest metrics
  ## are dropped first when this buffer fills.
  ## This buffer only fills when writes fail to output plugin(s).
  metric_buffer_limit = 1000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default, precision will be set to the same timestamp order as the
  ## collection interval, with the maximum being 1s.
  ## Precision will NOT be used for service inputs, such as logparser and statsd.
  ## Valid values are "ns", "us" (or "Âµs"), "ms", "s".
  precision = "ns"

  ## Logging configuration:
  ## Run telegraf with debug log messages.
  debug = true
  ## Run telegraf in quiet mode (error log messages only).
  quiet = false
  ## Specify the log file name. The empty string means to log to stderr.
  logfile = ""

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################
[[outputs.file]]
  files = ["stdout"]

# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  ## The full HTTP or UDP endpoint URL for your InfluxDB instance.
  ## Multiple urls can be specified as part of the same cluster,
  ## this means that only ONE of the urls will be written to each interval.
  # urls = ["udp://localhost:8089"] # UDP endpoint example
  urls = ["http://10.6.0.71:8086"] # required
  ## The target database for metrics (telegraf will create it if not exists).
  database = "kamal" # required

  ## Retention policy to write to. Empty string writes to the default rp.
  retention_policy = ""
  ## Write consistency (clusters only), can be: "any", "one", "quorum", "all"
  write_consistency = "any"

  ## Write timeout (for the InfluxDB client), formatted as a string.
  ## If not provided, will default to 5s. 0s means no timeout (not recommended).
  timeout = "5s"

#
# # Send metrics to SQL Database
#[[outputs.sql]]
#   ## Database driver
#   ## Valid options: mssql (Microsoft SQL Server), mysql (MySQL), pgx (Postgres),
#   ##  sqlite (SQLite3), snowflake (snowflake.com)
#  driver = "pgx"
#
#   ## Data source name
#   ## The format of the data source name is different for each database driver.
#   ## See the plugin readme for details.
#   # data_source_name = ""
#
#   ## Timestamp column name
#  timestamp_column = "timestamp"
#
#   ## Table creation template
#   ## Available template variables:
#   ##  {TABLE} - table name as a quoted identifier
#   ##  {TABLELITERAL} - table name as a quoted string literal
#   ##  {COLUMNS} - column definitions (list of quoted identifiers and types)
#   # table_template = "CREATE TABLE {TABLE}({COLUMNS})"
#
#   ## Table existence check template
#   ## Available template variables:
#   ##  {TABLE} - tablename as a quoted identifier
#   # table_exists_template = "SELECT 1 FROM {TABLE} LIMIT 1"
#
#   ## Initialization SQL
#   # init_sql = ""
#
#   ## Metric type to SQL type conversion
#   #[outputs.sql.convert]
#   #  integer              = "INT"
#   #  real                 = "DOUBLE"
#   #  text                 = "TEXT"
#   #  timestamp            = "TIMESTAMP"
#   #  defaultvalue         = "TEXT"
#   #  unsigned             = "UNSIGNED"

###############################################################################
#                            SERVICE INPUT PLUGINS                            #
###############################################################################

[[processors.parser]]
  parse_fields = ["value"]
  merge = "override"
  data_format = "json"

# Read metrics from MQTT topic(s)
[[inputs.mqtt_consumer]]
  name_override = "kamal"
  servers = ["203.110.86.71:1883"]
  # 203.110.86.71
  ## MQTT QoS, must be 0, 1, or 2
  qos = 1

  ## Topics to subscribe to
   # "telegraf/host01/cpu",
    # "telegraf/+/mem",
    # "sensors/#",

  topics = ['VT/301', 'VT/302', 'VT/303', 'VT/304', 'VT/305', 'VT/306', 'VT/307', 'VT/308', 'VT/309', 'VT/310', 'VT/311', 'VT/312', 'VT/313', 'VT/314', 'VT/315', 'VT/316', 'VT/317', 'VT/318', 'VT/319', 'VT/320', 'VT/321', 'VT/322', 'VT/323', 'VT/324', 'VT/325', 'VT/326', 'VT/327', 'VT/328', 'VT/329', 'VT/330', 'VT/331', 'VT/332', 'VT/333', 'VT/334', 'VT/335', 'VT/336', 'VT/337', 'VT/338', 'VT/339', 'VT/340', 'VT/341', 'VT/342', 'VT/343', 'VT/344', 'VT/345', 'VT/346', 'VT/347', 'VT/348', 'VT/349', 'VT/350', 'VT/351', 'VT/352', 'VT/353', 'VT/354', 'VT/355', 'VT/356', 'VT/357', 'VT/358', 'VT/359', 'VT/360', 'VT/361', 'VT/362', 'VT/363', 'VT/364', 'VT/365', 'VT/366', 'VT/367', 'VT/368', 'VT/369', 'VT/370', 'VT/371', 'VT/372', 'VT/373', 'VT/374', 'VT/375', 'VT/376', 'VT/377', 'VT/378', 'VT/379', 'VT/380', 'VT/381', 'VT/382', 'VT/383', 'VT/384', 'VT/385', 'VT/386', 'VT/387', 'VT/388', 'VT/389', 'VT/390', 'VT/391', 'VT/392', 'VT/393', 'VT/394', 'VT/395', 'VT/396', 'VT/397', 'VT/398', 'VT/399', 'VT/400']
#['001', '002', '003', '004', '005', '006', '007', '008', '009', '010', '011', '012', '013', '014', '015', '016', '017', '018', '019', '020', '021', '022', '023', '024', '025', '026', '027', '028', '029', '030', '031', '032', '033', '034', '035', '036', '037', '038', '039', '040', '041', '042', '043', '044', '045', '046', '047', '048', '049', '050', '051', '052', '053', '054', '055', '056', '057', '058', '059', '060', '061', '062', '063', '064', '065', '066', '067', '068', '069', '070', '071', '072', '073', '074', '075', '076', '077', '078', '079', '080', '081', '082', '083', '084', '085', '086', '087', '088', '089', '090', '091', '092', '093', '094', '095', '096', '097', '098', '099', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146', '147', '148', '149', '150', '151', '152', '153', '154', '155', '156', '157', '158', '159', '160', '161', '162', '163', '164', '165', '166', '167', '168', '169', '170', '171', '172', '173', '174', '175', '176', '177', '178', '179', '180', '181', '182', '183', '184', '185', '186', '187', '188', '189', '190', '191', '192', '193', '194', '195', '196', '197', '198', '199', '200', '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212', '213', '214', '215', '216', '217', '218', '219', '220', '221', '222', '223', '224', '225', '226', '227', '228', '229', '230', '231', '232', '233', '234', '235', '236', '237', '238', '239', '240', '241', '242', '243', '244', '245', '246', '247', '248', '249', '250', '251', '252', '253', '254', '255', '256', '257', '258', '259', '260', '261', '262', '263', '264', '265', '266', '267', '268', '269', '270', '271', '272', '273', '274', '275', '276', '277', '278', '279', '280', '281', '282', '283', '284', '285', '286', '287', '288', '289', '290', '291', '292', '293', '294', '295', '296', '297', '298', '299', '300', '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312', '313', '314', '315', '316', '317', '318', '319', '320', '321', '322', '323', '324', '325', '326', '327', '328', '329', '330', '331', '332', '333', '334', '335', '336', '337', '338', '339', '340', '341', '342', '343', '344', '345', '346', '347', '348', '349', '350', '351', '352', '353', '354', '355', '356', '357', '358', '359', '360', '361', '362', '363', '364', '365', '366', '367', '368', '369', '370', '371', '372', '373', '374', '375', '376', '377', '378', '379', '380', '381', '382', '383', '384', '385', '386', '387', '388', '389', '390', '391', '392', '393', '394', '395', '396', '397', '398', '399', '400', '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412', '413', '414', '415', '416', '417', '418', '419', '420', '421', '422', '423', '424', '425', '426', '427', '428', '429', '430', '431', '432', '433', '434', '435', '436', '437', '438', '439', '440', '441', '442', '443', '444', '445', '446', '447', '448', '449', '450', '451', '452', '453', '454', '455', '456', '457', '458', '459', '460', '461', '462', '463', '464', '465', '466', '467', '468', '469', '470', '471', '472', '473', '474', '475', '476', '477', '478', '479', '480', '481', '482', '483', '484', '485', '486', '487', '488', '489', '490', '491', '492', '493', '494', '495', '496', '497', '498', '499', '500']
  #["001"]
  #,"002"]

  # if true, messages that can't be delivered while the subscriber is offline
  # will be delivered when it comes back (such as on service restart).
  # NOTE: if true, client_id MUST be set
  persistent_session = false
  # If empty, a random client ID will be generated.
  client_id = ""

  ## username and password to connect MQTT server.
  # username = "telegraf"
  # password = "metricsmetricsmetricsmetrics"

  ## Optional SSL Config
  # ssl_ca = "/etc/telegraf/ca.pem"
  # ssl_cert = "/etc/telegraf/cert.pem"
  # ssl_key = "/etc/telegraf/key.pem"
  ## Use SSL but skip chain & host verification
  # insecure_skip_verify = false

  ## Data format to consume.
  ## Each data format has it's own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md

  # retain = false
  tag_keys = ["ID"]

  data_format = "json"
  # data_type = "string"
  # [inputs.mqtt_consumer.tags]
  #     destinationdb = "db01"
  # data_format = "json"
  # json_string_fields  =[
  #   "a",
  #   "b"
  # ]
  # data_type = "integer"
  #json_string_fields = ["NCH1","NCH2","NCH3","NCH4","NCH5","NCH6","NCH7","NCH8","NCH9","NCH10","NCH11","NCH12","NCH13","NCH14","NCH15","NCH16","NCH17","NCH18","NCH19","NCH20"]
